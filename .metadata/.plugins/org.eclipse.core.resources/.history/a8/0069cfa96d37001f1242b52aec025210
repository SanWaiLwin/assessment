package com.neurogine.assessment.aspect;

import org.aspectj.lang.JoinPoint;
import org.aspectj.lang.annotation.AfterReturning;
import org.aspectj.lang.annotation.AfterThrowing;
import org.aspectj.lang.annotation.Aspect;
import org.aspectj.lang.annotation.Before;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.stereotype.Component;

/**
 * @version : 1.0.0
 * @description :
 * @author : SanWaiLwin
 * @date : Jul 1, 2024 12:35:49 PM
 */
@Aspect
@Component
public class LoggingAspect {

	private static final Logger logger = LoggerFactory.getLogger(LoggingAspect.class);

	@Before("execution(* com.neurogine.assessment.service.impl.StoreServiceImpl.*(..)) || execution(* com.neurogine.assessment.controller..*(..))")
	public void logBefore(JoinPoint joinPoint) {
		logger.info("Entering method: {} with arguments: {}", joinPoint.getSignature().toShortString(),
				joinPoint.getArgs());
	}

	@Before("execution(* com.neurogine.assessment.service.impl.StoreServiceImpl.*(..)) || execution(* com.neurogine.assessment.controller..*(..))")
	public void logAfterReturning(JoinPoint joinPoint, Object result) {
		logger.info("Exiting method: {} with result: {}", joinPoint.getSignature().toShortString(), result);
	}

	@Before("execution(* com.neurogine.assessment.service.impl.StoreServiceImpl.*(..)) || execution(* com.neurogine.assessment.controller..*(..))")
	public void logAfterThrowing(JoinPoint joinPoint, Throwable error) {
		logger.error("Exception in method: {} with cause: {}", joinPoint.getSignature().toShortString(),
				error.getMessage());
	}
}
